#version 450

#include "../NOISE.h"

layout( local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

layout( push_constant ) uniform PUSH { NoiseParameters params; };

layout( set = 0, binding = 0 ) writeonly uniform image2DArray noiseImage;

void main()
{
   vec3 dims  = imageSize( noiseImage );
   vec2 uv    = vec2( gl_GlobalInvocationID.xy / dims.xy );
   uint layer = gl_GlobalInvocationID.z;

   uv = uv * vec2( dims.x / dims.y, 1.0 ) + params.seed;  // Aspect ratio corrected

   // Cheap way of making it tile across instances.
   // Ideally, we'd have something based on world position
   uv *= 1.0 + (1.0 / dims.xy); // Getting one more texel around the border
   uv.x += layer % 8;
   uv.y += layer / 8;

   // Fractal Brownian Motion (FBM)
   float finalNoise = SimplexFBM( uv.xy, params );

   imageStore( noiseImage, ivec3( gl_GlobalInvocationID.xyz ), vec4( vec3( finalNoise ), 1.0 ) );
}