#version 450
#define PI 3.1415926535897932384626433832795

#include "FFTOCEAN.h"

layout( local_size_x = 16, local_size_y = 16 ) in;

layout( push_constant ) uniform PUSH { OceanParams params; };

layout( set = 0, binding = 0, rgba32f ) restrict uniform image2D displacement;
layout( set = 0, binding = 1, rg32f ) readonly uniform image2D pingpong0;
layout( set = 0, binding = 2, rg32f ) readonly uniform image2D pingpong1;

void main()
{
   const ivec2 ssCoord = ivec2( gl_GlobalInvocationID.xy );

   const float perms[] = { 1.0, -1.0 };
   const uint index    = int( mod( ( int( ssCoord.x + ssCoord.y ) ), 2 ) );
   const float perm    = perms[index];

   // Wave vector or the direction of the wave (k)
   const vec3 waveVector = vec3(
       2.0 * PI * ssCoord.x / params.horizontalDimension,
       0.0,
       2.0 * PI * ssCoord.y / params.horizontalDimension );

   // The components we want to change
   const vec3 mask = vec3(
       params.horizontalScale * ( params.componentMask >> 2 & 0x1 ),
       -params.verticalScale * ( params.componentMask >> 1 & 0x1 ),  // We invert Y because...
       params.horizontalScale * ( params.componentMask >> 0 & 0x1 ) );

   // All the components we don't want to change
   const vec3 negMask = vec3(
       ~( params.componentMask >> 2 ) & 0x1,
       ~( params.componentMask >> 1 ) & 0x1,
       ~( params.componentMask >> 0 ) & 0x1 );

   vec2 h = vec2( 0.0 );
   if( params.pingpong == 0 )
   {
      h = imageLoad( pingpong0, ssCoord ).rg;
   }
   else if( params.pingpong == 1 )
   {
      h = imageLoad( pingpong1, ssCoord ).rg;
   }

   const float disp    = perm * ( h.x / float( params.resolution * params.resolution ) );
   const vec3 prevDisp = imageLoad( displacement, ssCoord ).xyz;
   const vec3 newDisp  = ( negMask * prevDisp ) + ( mask * disp );

   imageStore( displacement, ssCoord, vec4( newDisp, 1.0 ) );
}