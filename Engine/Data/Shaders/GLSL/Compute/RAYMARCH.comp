#version 450

layout( local_size_x = 16, local_size_y = 16 ) in;

layout( push_constant ) uniform RaymarchParameters
{
   uint width;
   uint height;
   uint octaves;
   float time;
};

layout( set = 0, binding = 0 ) writeonly uniform image2D outImage;
 
#include "RAYMARCH.h"

float GetDist(vec3 p)
{
	//Sphere. xyz is position w is radius
    vec4 s = vec4(0.0, 1.0, 6.0 + sin(time) * 3.0, 1.0);

    float sphereDist = length(p-s.xyz) - s.w;
    float planeDist = p.y;

    float d = min(sphereDist,planeDist);
 
    return d;
}

float RayMarch(vec3 ro, vec3 rd) 
{
    float t = 0.0;
    for(int i = 0; i < MAX_STEPS; i++)
    {
        vec3 p = ro + rd * t;
        float ds = GetDist(p); // ds is Distance Scene
        t += ds;
        if(t > MAX_DIST || ds < SURFACE_DIST) break;
    }

    return t;
}

vec3 GetNormal(vec3 p)
{ 
    float d = GetDist(p); // Distance
    vec2 e = vec2(0.01, 0.0); // Epsilon
    vec3 n = d - vec3(
    GetDist(p - e.xyy),  
    GetDist(p - e.yxy),
    GetDist(p - e.yyx));
   
    return normalize(n);
}
 
void main()
{
	vec2 coords = gl_GlobalInvocationID.xy;
	vec2 res = vec2(width, height);

    vec2 uv = (coords - 0.5 * res.xy) / res.y;
    vec3 ro = vec3(0.0, 1.0, 0.0); // Ray Origin / Camera
    vec3 rd = normalize(vec3(uv.x, -uv.y, 1.0));

    float d = RayMarch(ro, rd); // Distance
    vec3 p = ro + rd * d;

    d /= 10.0;
    vec3 color = vec3(d);
     
    // Set the output color
    imageStore(outImage, ivec2(coords), vec4(color, 1.0));
}