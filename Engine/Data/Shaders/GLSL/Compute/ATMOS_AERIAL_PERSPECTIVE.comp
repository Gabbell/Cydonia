#version 450

#include "ATMOS.h"

layout( local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

layout( push_constant ) uniform PUSH { AtmosphereParameters params; };

layout( set = 0, binding = 0 ) uniform ViewInfo
{
   mat4 invProj;
   mat4 invView;
   vec4 viewPos;
   vec4 lightDir;
}
viewInfo;

layout( set = 0, binding = 1 ) uniform sampler2D transmittanceLUT;
layout( set = 0, binding = 2 ) uniform sampler2D multiScatteringLUT;
layout( set = 0, binding = 3 ) writeonly uniform image3D aerialPerspectiveLUT;

// Constants
// ================================================================================================
const uint numScatteringSteps = 32;
const float stepContribution  = 1.0 / numScatteringSteps;

const float maxDistanceMM = 0.032;  // 32KM

// ================================================================================================
void main()
{
   const ivec3 ssCoord = ivec3( gl_GlobalInvocationID.xyz );
   const float distanceMM =
       SliceToDistanceMM( ssCoord.z, maxDistanceMM, imageSize( aerialPerspectiveLUT ).z );
   const vec2 uv = vec2( ssCoord + 0.5 ) / vec2( imageSize( aerialPerspectiveLUT ).xy );

   // Constructing camera ray direction in world space
   // =============================================================================================
   const vec4 ndcCoord = vec4( ( uv * 2.0 ) - 1.0, -1.0, 1.0 );  // UV [0,1] to NDC [-1,1]
   vec4 rayEye         = viewInfo.invProj * ndcCoord;
   const vec3 rayDir   = normalize( mat3( viewInfo.invView ) * rayEye.xyz );

   // Adjusting current view position to be within the same scale (megameters)
   const vec3 viewPosMM = getMMPosition( params.groundRadiusMM, viewInfo.viewPos.xyz );
   const vec3 sunDir    = -viewInfo.lightDir.xyz;

   // Start raymarching/integrating
   const float tMax = distanceMM;

   const float cosTheta = dot( rayDir, sunDir );

   const float rayleighPhase = getRayleighPhase( cosTheta );
   const float miePhase      = getMiePhase( params.miePhase, cosTheta );

   vec3 illuminance        = vec3( 0.0 );
   float meanTransmittance = 0.0;
   vec3 transmittance      = vec3( 1.0 );
   float t                 = 0.0;
   for( uint step = 0; step < numScatteringSteps; step++ )
   {
      const float newT = ( step + 0.5 ) * ( tMax / numScatteringSteps );
      const float dt   = newT - t;

      t = newT;

      const vec3 newPos = viewPosMM.xyz + t * rayDir;

      vec3 rayleighScattering;
      vec3 mieScattering;
      vec3 extinction;
      getScatteringValues( newPos, params, rayleighScattering, mieScattering, extinction );

      const vec3 sampleTransmittance = exp( -dt * extinction );

      const vec2 lookupUV =
          LUTParameterization( params.groundRadiusMM, params.atmosphereRadiusMM, sunDir, newPos );

      const vec3 lookupTransmittance = texture( transmittanceLUT, lookupUV ).rgb;
      const vec3 Psi_ms              = texture( multiScatteringLUT, lookupUV ).rgb;

      const vec3 rayleighInScattering =
          rayleighScattering * ( rayleighPhase * lookupTransmittance + Psi_ms );
      const vec3 mieInScattering = mieScattering * ( miePhase * lookupTransmittance + Psi_ms );
      const vec3 inScattering    = ( rayleighInScattering + mieInScattering );

      // Integrated scattering within path segment.
      const vec3 scatteringIntegral =
          ( inScattering - inScattering * sampleTransmittance ) / extinction;

      illuminance += ( scatteringIntegral * transmittance );
      meanTransmittance +=
          ( ( transmittance.x + transmittance.y + transmittance.z ) / 3.0 ) * stepContribution;

      transmittance *= sampleTransmittance;
   }

   imageStore( aerialPerspectiveLUT, ssCoord, vec4( illuminance, meanTransmittance ) );
}