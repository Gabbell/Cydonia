#version 450
#define PI 3.1415926535897932384626433832795

layout( local_size_x = 1, local_size_y = 1 ) in;

layout( push_constant ) uniform OceanParameters
{
   uint resolution;
   uint horizontalDimension;
   uint pingpong;
   uint direction;
   uint stage;
   uint componentMask;
   float amplitude;
   float gravity;
   float windSpeed;
   float windDirX;
   float windDirZ;
   float time;
};
layout( set = 0, binding = 0, rgba32f ) writeonly uniform image2D butterflyTexture;

layout( std430, set = 0, binding = 1 ) buffer indices { uint j[]; }
bitReversed;

struct complex
{
   float real;
   float im;
};

void main()
{
   const vec2 x = gl_GlobalInvocationID.xy;

   const float k = mod( x.y * ( float( resolution ) / pow( 2, x.x + 1 ) ), resolution );

   complex twiddle = complex(
       cos( 2.0 * PI * k / float( resolution ) ), sin( 2.0 * PI * k / float( resolution ) ) );

   const int butterflySpan = int( pow( 2, x.x ) );

   int butterflyWing;

   if( mod( x.y, pow( 2, x.x + 1 ) ) < pow( 2, x.x ) )
   {
      butterflyWing = 1;
   }
   else
   {
      butterflyWing = 0;
   }

   // First stage, bit reversed indices
   if( x.x == 0 )
   {
      if( butterflyWing == 1 )
      {
         // Top butterfly wing
         imageStore(
             butterflyTexture,
             ivec2( x ),
             vec4(
                 twiddle.real,
                 twiddle.im,
                 bitReversed.j[int( x.y )],
                 bitReversed.j[int( x.y + 1 )] ) );
      }
      else
      {
         // Bottom butterfly wing
         imageStore(
             butterflyTexture,
             ivec2( x ),
             vec4(
                 twiddle.real,
                 twiddle.im,
                 bitReversed.j[int( x.y - 1 )],
                 bitReversed.j[int( x.y )] ) );
      }
   }
   else  // Second to log2(resolution) stage
   {
      if( butterflyWing == 1 )
      {
         // Top butterfly wing
         imageStore(
             butterflyTexture,
             ivec2( x ),
             vec4( twiddle.real, twiddle.im, x.y, x.y + butterflySpan ) );
      }
      else
      {
         // Bottom butterfly wing
         imageStore(
             butterflyTexture,
             ivec2( x ),
             vec4( twiddle.real, twiddle.im, x.y - butterflySpan, x.y ) );
      }
   }
}