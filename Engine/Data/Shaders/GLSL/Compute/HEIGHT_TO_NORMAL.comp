#version 450

layout( local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

layout( push_constant ) uniform PUSH { float scale; };

layout( set = 0, binding = 0 ) uniform sampler2DArray heightMap;
layout( set = 0, binding = 1 ) writeonly uniform image2DArray normalMap;

void main()
{
   vec3 dims  = textureSize( heightMap, 0 );
   vec3 uv    = vec3( gl_GlobalInvocationID.xy / dims.xy, gl_GlobalInvocationID.z );
   uint layer = gl_GlobalInvocationID.z;

   uv.xy *= vec2( dims.x / dims.y, 1.0 );  // Aspect ratio corrected

   // const vec2 texelSize = 1.0 / textureSize(heightMap, 0).xy;
   // const vec3 offset = vec3(texelSize.x, texelSize.y, 0.0);
   // const vec3 leftUV = vec3(clamp(uv.xy - offset.xz, 0.0, 1.0), uv.z);
   // const vec3 rightUV = vec3(clamp(uv.xy + offset.xz, 0.0, 1.0), uv.z);
   // const vec3 topUV = vec3(clamp(uv.xy - offset.zy, 0.0, 1.0), uv.z);
   // const vec3 bottomUV = vec3(clamp(uv.xy + offset.zy, 0.0, 1.0), uv.z);
   //
   // const float hO = texture( heightMap, uv ).r * 500.0;
   // const float hL = texture( heightMap, leftUV ).r * 500.0;
   // const float hR = texture( heightMap, rightUV ).r * 500.0;
   // const float hT = texture( heightMap, topUV ).r * 500.0;
   // const float hB = texture( heightMap, bottomUV ).r * 500.0;

   const ivec3 off = ivec3( -1, 0, 1 );
   const float hO  = texture( heightMap, uv ).r * scale;
   const float hL  = textureOffset( heightMap, uv, off.xy ).r * scale;
   const float hR  = textureOffset( heightMap, uv, off.zy ).r * scale;
   const float hT  = textureOffset( heightMap, uv, off.yx ).r * scale;
   const float hB  = textureOffset( heightMap, uv, off.yz ).r * scale;

   const vec3 left   = vec3( -1.0, hL, 0.0 ) - hO;
   const vec3 right  = vec3( 1.0, hR, 0.0 ) - hO;
   const vec3 top    = vec3( 0.0, hT, -1.0 ) - hO;
   const vec3 bottom = vec3( 0.0, hB, 1.0 ) - hO;

   const vec3 topRight    = cross( right, top );
   const vec3 topLeft     = cross( top, left );
   const vec3 bottomLeft  = cross( left, bottom );
   const vec3 bottomRight = cross( bottom, right );

   const vec3 normal = ( normalize( topRight + topLeft + bottomLeft + bottomRight ) + 1.0 ) / 2.0;

   imageStore( normalMap, ivec3( gl_GlobalInvocationID.xyz ), vec4( normal, 1.0 ) );
}